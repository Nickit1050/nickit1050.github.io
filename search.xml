<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>理解继承（inheritance）</title>
    <url>/2020/04/22/%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="理解继承（inheritance）"><a href="#理解继承（inheritance）" class="headerlink" title="理解继承（inheritance）"></a>理解继承（inheritance）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继承作为java这门编程语言的三大特性之一，可谓是面向对象编程的一块基石。可以毫不夸张地说，继承是java的灵魂，也是诸多面向对象编程语言的灵魂所在。由此，理解并掌握java的继承知识对于java初学者来说十分有必要，同样也为其日后的学习打下夯实的基础。</p>
<h2 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h2><p>首先，继承是“<strong>类（class）</strong>”这一层面的行为。具体体现为从已知类——父类当中产生新的类——子类，子类继承父类的<strong>所有</strong>数据域和方法，并具有自己的扩展能力，即可以拥有自己独有的数据域和方法。</p>
<p>就好比遗产和王位的继承——继承者将拥有被继承者所有的资产和地位，当然，继承者自己所特有的资产和地位依旧是它自己的。举个不恰当的例子，总不至于继承了老家的三分自留地，自己城里的房子就被剥夺了吧？</p>
<h2 id="继承的格式"><a href="#继承的格式" class="headerlink" title="继承的格式"></a>继承的格式</h2><p>在java中我们通过extends关键字来声明类的继承，形式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subclass</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="继承的优势"><a href="#继承的优势" class="headerlink" title="继承的优势"></a>继承的优势</h2><p>继承能够极大程度减少代码的重复，使代码可充分利用。同时降低了代码的维护成本。</p>
<p>话不多说，先上代码。。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String id;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String sex;</span><br><span class="line">    String teachingModule;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// constructors and other methods are omitted...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String id;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String sex;</span><br><span class="line">    <span class="keyword">int</span> grade;</span><br><span class="line">    String[] modules;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// constructors and other methods are omitted...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假如我们有以上两个类，老师和学生，通过仔细观察，我们发现这两个类中有相当一部分的内容是重复的。为了减少代码的重复，增强代码可重复使用性。我们可以将其中的相同部分提炼出来，创建一个新的类，并让这两个类共同继承于新的类。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    String id;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String sex;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// constructors and other methods are omitted.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String teachingModule;</span><br><span class="line">    <span class="comment">// constructors and methods are omitted.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> grade;</span><br><span class="line">    String[] modules;</span><br><span class="line">    <span class="comment">// constructors and methods are omitted.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="何时需要使用继承"><a href="#何时需要使用继承" class="headerlink" title="何时需要使用继承"></a>何时需要使用继承</h2><ol>
<li>当发现几个类当中有一些共同的属性和方法导致代码重复的时候，就理应考虑是否可以将其放入一个公共的父类当中去。</li>
<li>当发现2个类（A和B）之间存在“is-a”的关系，即“A是B”或者“B是A”的时候，它们之间便存在继承的可能性。例如上文代码中，Person和Student，Person和Teacher就存在这样的关系。</li>
</ol>
<h2 id="继承的几种形式"><a href="#继承的几种形式" class="headerlink" title="继承的几种形式"></a>继承的几种形式</h2><p>继承主要分为单继承，多继承，多重继承。</p>
<p>单继承就是最简单的继承方式，即B继承A，Teacher继承Person…不同的类继承同一个类亦是合法的。</p>
<p>多继承是指一个子类同时继承若干个父类，如同以下形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请注意，多继承在java当中是不支持的！！！如若需要实现多继承的功能，在java中可以通过接口（interface）来实现。</p>
<p>多重继承就像一个继承链，B继承A，C继承B，D继承C….这在java当中是合法的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">C</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>



<h2 id="继承关键字"><a href="#继承关键字" class="headerlink" title="继承关键字"></a>继承关键字</h2><p>继承当中主要涉及到extends, implements, super, this以及final这些关键字。</p>
<h3 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h3><p>在Java当中，每个类只能拥有一个父类，通过extends关键字来进行声明。相信读者在上文已经看到了许多例子，此处不在举例。值得关注的是，在java中所有的类都有一个共同的祖先类，即Object类。如果一个类没有继承别的类将默认继承Object类。</p>
<h3 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h3><p>由于java只支持单一继承，因此如果想要实现多继承的功能，可以通过接口（interface）来实现。有关接口的详细知识我们日后再谈论。以下就让小N举一个简单的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mutable</span> </span>&#123;...&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span> </span>&#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="keyword">implements</span> <span class="title">Mutable</span>, <span class="title">Comparable</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<h3 id="super和this关键字"><a href="#super和this关键字" class="headerlink" title="super和this关键字"></a>super和this关键字</h3><p>在子类中如果需要调用父类的可见数据域和方法，可通过super.fields或者super.method()来实现。如需调用父类的构造函数可以通过super()来实现。通常情况下，当且仅当父类和子类有同名实例变量或同名函数的时候才必须通过super关键字加以区分。而this则是指向自身的引用。可以用来区分同名局部变量和全局变量（实例变量）。</p>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>其作用正如其字面意思那般。final可以用以声明类，方法，变量。</p>
<p>被final所声明的类是不能被继承的。例如java中常见的String类就是由final所声明，无法被继承的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;...&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;...&#125; <span class="comment">//此写法错误，被声明为final的类无法被继承！！！</span></span><br></pre></td></tr></table></figure>

<p>被final所声明的方法是无法被子类重写的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;...&#125; <span class="comment">//此写法错误，被声明为final的方法不可被重写！！！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>被final所声明的变量无法通过重新赋值的方式进行修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PI = <span class="number">3.1415926</span>; <span class="comment">//此写法错误，被声明为final的变量不可通过重新赋值来修改！！！</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>子类并不会继承父类的构造函数，相反，子类会在自己的构造函数当中调用父类构造函数。如果你未曾在子类构造函数的第一行显式地调用父类的构造函数，那么虚拟机会隐式调用父类无参构造函数，即spuer（）。换而言之，如果父类的构造函数需要有参数传入，那么就需要在子类构造函数的<strong>第一个语句</strong>显式调用父类构造函数并传入对应的参数。需要注意的是，如果父类并没有无参构造函数，且子类也没有显式调用父类含参构造函数，那么编译器便会报错！因此，一个好的编程习惯就是在父类中添加一个无参构造函数，以免因忘记显式调用父类构造函数而出现编译错误。（这一点在多重继承的过程中尤为体现）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 父类构造函数无参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造函数内容省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//以下语句可写可不写</span></span><br><span class="line">        <span class="keyword">super</span>(); </span><br><span class="line">        <span class="comment">//构造函数其他内容省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">//未在子类构造函数第一个语句调用父类构造函数，此写法会导致编译错误！此写法错误。</span></span><br><span class="line">        <span class="comment">//构造函数其他内容省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 父类构造函数有参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造函数内容省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 由于A 当中构造函数有参，因此必须在B的构造函数第一个语句显式调用A的构造函数并传入参数。</span></span><br><span class="line">        <span class="keyword">super</span>(x); <span class="comment">//此写法正确。</span></span><br><span class="line">        <span class="comment">//构造函数其他内容省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// jvm 会隐式调用super（），然而A当中没有无参构造函数，将导致编译错误！此写法错误。</span></span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>; </span><br><span class="line">        <span class="comment">//构造函数其他内容省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>java继承相关的知识还是挺多的，而且也都是十分重要的。初学者一定要理解每一个知识点，打好基础，以便日后可以走得更远，更轻松！</p>
]]></content>
      <categories>
        <category>概念理解</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>理解重载(Overload)与重写(Override)</title>
    <url>/2020/04/21/%E9%87%8D%E8%BD%BD%E4%B8%8E%E9%87%8D%E5%86%99/</url>
    <content><![CDATA[<h1 id="理解重载-Overload-与重写-Override"><a href="#理解重载-Overload-与重写-Override" class="headerlink" title="理解重载(Overload)与重写(Override)"></a>理解重载(Overload)与重写(Override)</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学习以java为代表的面向对象的编程语言的过程中，理解重载和重写极其重要。众所周知，java的三大特性是继承，封装和多态。然而重载和重写分别涉及到java的多态和继承这两大特性，再加上其广泛的运用。由此，其重要性不言而喻。今天，小N就来谈一谈自己是如何理解重载和重写的，希望对读者能有所启发。</p>
<h2 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h2><p>重载（Overload）通常是指在一个类（Class）当中，方法（method）名字相同但参数（parameter）不同。重载对返回值类型和修饰符没有限制，其可以相同也可以不同。注意，这里所说的参数所指的是<strong>参数的类型</strong>，<strong>参数的数量</strong>以及<strong>参数的顺序</strong>。值得一提的是，构造函数（constructor）也是可以被重载的，这一点也是最常用的。现给定一个方法头（Header）——public int doSomething(int x)，以下列表将举例说明如何判断新的方法是否为已知方法的重载方法。</p>
<table>
<thead>
<tr>
<th>Header</th>
<th>是否为重载方法</th>
</tr>
</thead>
<tbody><tr>
<td>private void doSomething(int x)</td>
<td>否，未改变参数列表，编译错误</td>
</tr>
<tr>
<td>public int doSomething()</td>
<td>是，参数的数量变化</td>
</tr>
<tr>
<td>public int doSomething(String x)</td>
<td>是，参数的类型变化</td>
</tr>
<tr>
<td>public int doSomething(int y)</td>
<td>否，未改变参数列表，编译错误</td>
</tr>
</tbody></table>
<p>上表中，相信前三个都很容易理解，第四个有一些tricky，看似参数改变了，其实只是改变了变量名，参数类型依旧没有改变，因此第四个并不能称为重载方法。</p>
<h2 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h2><p>重写（Override）是子类（subclass）对父类（superclass）中可访问的方法的内容进行重新编写，返回值和参数列表都不变。举一个不恰当的比喻，好比“挂羊头，卖狗肉”。在小N看来，重写有以下几大显著的优势：</p>
<ol>
<li>子类可以根据需要定义自己的行为从而实现父类的方法。</li>
<li>在一定程度上可以起到简化代码的作用，避免对某些语句的滥用。</li>
</ol>
<p>假如我们现有“猪”，“狗”，“猫”这三个类，现在我们需要实现判断某个对象的叫声。正常情况下，可能会这么做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sound</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// assume we can get one animal string of pigs, dogs and cats by calling getAnimal().</span></span><br><span class="line">        String animal = getAnimal();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"pig"</span>.equals(animal))&#123;</span><br><span class="line">            System.out.println(<span class="string">"哼哼哼。。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"dog"</span>.equals(animal))&#123;</span><br><span class="line">            System.out.println(<span class="string">"汪汪汪。。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"喵喵喵。。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>诚然，当动物的种类很少的时候，这么做也不是很麻烦。但是随着其种类增多，代码的维护成本将大幅度上升，并且会造成if-statement的滥用。而重写就可以有效改善这个问题！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"动物可以发出叫声"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"哼哼哼。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"汪汪汪。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sound</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喵喵喵。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sound</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//assume we can get one animal object of pigs, dogs and cats by invoking getAnimal().</span></span><br><span class="line">        Animal animal = getAnimal();</span><br><span class="line">        animal.sound();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在主函数中我们仅仅用了一行代码就取代了上一种方法的诸多if语句，是不是感觉很简洁呢！而且，如果增加新的动物种类，我只需要定义新的Animal子类并重写sound方法，不需要对现有的主函数做任何修改。极大程度降低了维护代码的工作量，并方便维护人员定位未知的bug。</p>
<p>注意事项：</p>
<ol>
<li>参数列表必须与被重写方法完全一致。</li>
<li>在jdk1.7及以后，返回类型可以为被重写方法返回类型的子类（也就是说，可以不与被重写方法完全相同）。</li>
<li>父类中声明为final和static的方法不能被重写。</li>
<li>构造函数不能被重写。</li>
<li>重写方法的访问权限不能比被重写方法的访问权限更低。</li>
<li>如果需要在重写方法中调用父类中被重写方法，可使用super关键字（例如：super.sound();）</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>重载和重写都是java多态的不同体现。重载具体指在同一个类中方法名相同而参数列表不同的方法。而重写是指子类对父类方法的重构，主要改变方法的内容，其余基本不变。</p>
]]></content>
      <categories>
        <category>概念理解</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>准程序员小N的第一篇博客</title>
    <url>/2020/04/07/%E5%87%86%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B0%8FN%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h1><p>我为什么要创建这个博客？我为什么要创建这个博客！我为什么要创建这个博客。。。（灵魂级的拷问。。。）</p>
<h2 id="搭建博客本身的这一过程"><a href="#搭建博客本身的这一过程" class="headerlink" title="搭建博客本身的这一过程"></a>搭建博客本身的这一过程</h2><p>害！只是因为在茫茫博客中多看了你一眼，发现了一个hexo静态博客的配置教程，还能托管到github上去。我顿时心动，内心就如万马之奔腾兮，食不能享，寝不能安。。。（咳咳有点夸张）</p>
<p>于是我说干就干，按照教程就做了起来，还是蛮容易的。搭建个人博客真的是超快乐，超开心的一件事！紧接着完成了一些基本的配置，包括更换了主题，添加分类和标签以及托管至github，一切都是那样的有趣。感觉就像打开了新世界的大门一样！</p>
<h2 id="时时记录总结所学知识"><a href="#时时记录总结所学知识" class="headerlink" title="时时记录总结所学知识"></a>时时记录总结所学知识</h2><p>认真算起来，正式开始学习计算机也将近有2年的时间了，知识也学了有一些了，但却深感自己距离入门还相去甚远——一方面等待自己去学习并掌握的知识还有很多很多，毕竟计算机领域博大精深；另一方面，对于已经学过的知识，由于自己没有及时系统得记录并总结，不免出现了遗忘或者掌握不牢的现象。因此，这也将会是一个很好的转折点。从今往后，将自己所学到的知识并融合自己的见解以博客的形式记录并展示出来，既可以供未来的自己随时巩固复习加深印象，也能够帮助读者理解计算机领域的某个难点，可谓一举两得。</p>
<h2 id="弥补一直以来的遗憾"><a href="#弥补一直以来的遗憾" class="headerlink" title="弥补一直以来的遗憾"></a>弥补一直以来的遗憾</h2><p>我一直想做一件可以长久的事业，它不必太宏伟，不必太感人，哪怕只是一些很基本的事情也可以。但是小时候的自己做事总是三分钟热度，难以真正长久。面对若干本只读到一半的童话书，面对一本本只写了几天的日记本，我深感遗憾和愧疚。奈何初中高中时代忙于学业，没有真正属于自己的时间用来做自己感兴趣的事，只得暂时压下这份惋惜。现在，已经步入大学的我有充足的时间用来做自己的事情，我想是时候来弥补这份遗憾了，相信这个博客便是一个崭新的开始！</p>
<h1 id="关于博客的内容…"><a href="#关于博客的内容…" class="headerlink" title="关于博客的内容…"></a>关于博客的内容…</h1><p>我想了许久，博客的内容应是多样化的，以计算机领域的内容为主。既包括作者在大学教育中所学到的内容（供自己将来复习所用），也将包括作者自我提升的过程中课外所学。同样，还会有像这篇博文一样作者自己的心路历程。毕竟，程序员的心理活动也是尤为重要的。。。总而言之，凡所应有，无所不有！</p>
<h1 id="今当远离，临表涕零，不知所言"><a href="#今当远离，临表涕零，不知所言" class="headerlink" title="今当远离，临表涕零，不知所言"></a>今当远离，临表涕零，不知所言</h1><p>也不知道这么写我的第一篇博客合适与否，不论怎样，就先这样吧（似乎也没什么想说的了）。相信今后的博客一定会越来越正规，越来越好的！</p>
<p>​                                                                                                                                 </p>
]]></content>
      <categories>
        <category>init</category>
      </categories>
      <tags>
        <tag>心路</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈类和对象</title>
    <url>/2020/04/12/%E6%B5%85%E8%B0%88%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在学习java之前也接触过一些编程语言，比如c，c++，python等。记得最开始学习他们的时候，无论是老师教还是自学，都是从写hello world开始的，相信大多数编程人员都深有同感。正当我抱着hello java的心态去上第一节课的时候，就惨遭现实打脸。整整2个小时的大课，老师从未提及过hello world，相反，他一直反复地灌输类和对象的概念。正因如此反常，才导致我听得十分投入。后来随着对java的深入学习，我才逐渐明白的老师的良苦用心——毕竟，在java当中，类和对象贯穿始终。话不多说，开始回归正题，到底什么是类，什么又是对象[ : ( ]呢？</p>
<h2 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h2><p>作为一个追求严谨学术的学子，对待一个新的名词，应当首先理解其概念。度娘上是这么说的——类是现实世界或思维世界中的实体在计算机中的反映，它将数据以及这些数据上的操作封装在一起。 （我似乎明白了百度近年来逐渐没落的原因）如此一个概念解读着实晦涩难懂。我们再来看看菜鸟教程是如何说的——类是一个模板，它描述一类对象的行为和状态。 这么一看，似乎理解了一些。原来类起到了一个模版的作用，通俗来讲，它定义了一类“志同道合的小伙伴”的行为和属性，其大体上分为数据域（field）和方法（method）。一下就是小N所写的一个类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 以下两个变量即为数据域，分别为名字和ID。</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类的构造器(constructor),用于创造Person类的实例对象。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此方法用于改名。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeName</span><span class="params">(String newName)</span> </span>&#123;</span><br><span class="line">      name = newName;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//此处略去其他方法。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果还不是那么容易理解，等对象的概念提出以后，将二者进行横向联系就会豁然开朗的。</p>
<h2 id="对象（Object）"><a href="#对象（Object）" class="headerlink" title="对象（Object）"></a>对象（Object）</h2><p>首先需要阐明的是，此对象（object）非彼对象（spouse），它同样是一个计算机领域的概念。“对象是具有类类型的变量。”（百度百科） 同样亦可以理解为对象是类的实例（instance）。就拿上面的Person类来举例，我们得到一个叫做“人”的类，那么在这个类中，数据域包括人的名字(name)以及ID。那么当具体到某个人，比如“法外狂徒”张三，就是这个类的一个实例，也是具有这个类——Person类型的一个对象。因此，我们可以这般理解，类是具有一定集合意义的，是抽象的，不针对某一个<strong>具体</strong>的事物。相比之下，对象就是专指”<strong>类</strong>“所对应的具体的实例。</p>
<table>
<thead>
<tr>
<th>类(Class)</th>
<th>抽象的，具有一定集合意义</th>
<th>人</th>
</tr>
</thead>
<tbody><tr>
<td><strong>对象(Object)</strong></td>
<td><strong>具象的，特指某一个事物</strong></td>
<td><strong>张三</strong></td>
</tr>
</tbody></table>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>类是一个模板，它描述一类对象的行为和状态，它往往是抽象的。对象是具有类类型的变量，它是具体的，特指某一个事物。不仅仅是学习java，对于学习面向对象的其他编程语言的初学者来说，理解并能区分类和对象这一概念尤为重要！希望小N的讲解能够对读者有所启发。最后，小N附上一个关于更多类和对象例子的表格，供读者参考。</p>
<table>
<thead>
<tr>
<th>类(class)</th>
<th>对象(object)</th>
<th>数据域(field)</th>
</tr>
</thead>
<tbody><tr>
<td>汽车品牌</td>
<td>奇瑞，比亚迪，宝马，奔驰，奥迪。。</td>
<td>品牌名，所属国家。。</td>
</tr>
<tr>
<td>朝代</td>
<td>唐，宋，元，明，清。。</td>
<td>朝代名，起始年份。。</td>
</tr>
<tr>
<td>人</td>
<td>张三， 李四， 王二麻子。。。</td>
<td>姓名，ID。。</td>
</tr>
<tr>
<td>小说</td>
<td>悲惨世界， 巴黎圣母院， 平凡的世界。。</td>
<td>书名，作者，出版日期。。</td>
</tr>
<tr>
<td>城市</td>
<td>北京， 上海， 广州， 深圳。。</td>
<td>城市名称，城市级别，领导人。。</td>
</tr>
<tr>
<td>编程语言</td>
<td>C, C++, Python, Java…</td>
<td>名称，创始人，创始时间，是否面向对象。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>概念理解</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
